#include <stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
}*new,*temp,*top,*bottom,*front,*rear;


void enQueue()
{
    int n;
    struct node* new;
    new=(struct node*)malloc (sizeof(struct node));
    scanf("%d",&n);
    new->data=n;
    new->next=NULL;
    if(rear==NULL)
    {
        front=new;
        rear=new;
    }
    else
    {
        rear->next=new;
        rear=new;
    }
   
}
int deQueue()
{
    int n;
    if(front==NULL)
    printf("Queue is empty\n");
    else
    {
        temp=front;
        front=front->next;
        temp->next=NULL;
        n=temp->data;
        free(temp);
    }
    return n;
}
void push()
{
    int n;
    new=(struct node*) malloc (sizeof(struct node));
    n=deQueue();
    new->data=n;
    new->next=NULL;
    if(bottom==NULL)
    {
        top=new;
        bottom=new;
    }
    else
    {
        new->next=top;
        top=new;
    }
}
void pop()
{
   int n;
    if(top==NULL)
    printf("Stack is empty\n");
    else
    {
        temp=top;
        top=top->next;
        temp->next=NULL;
        n=temp->data;
        free(temp);
    }
    printf("%d\n",n); 
}

void print (struct node *f)
{
    temp=f;
    if(f==NULL)
    printf("Queue/Stack is empty\n");
    else
    {
    while(temp->next!=NULL)
    {
        printf("%d",temp->data);
        temp=temp->next;
    }
    printf("%d\n",temp->data);
    }
}
void stackPermutation(int x[],int i,int n0,int n1,int n)
{
    if((n0<n)&&(n1<n)&&(n0>n1))
    {
        i=i+1;
        x[i]=0;
        n0=n0+1;
        stackPermutation(x,i,n0,n1,n);
        n0=n0-1;
        x[i]=1;
        n1=n1+1;
        stackPermutation(x,i,n0,n1,n);
        n1=n1-1;
    }
    if(((n0<n)&&(n1<n)&&(n0==n1))||((n0<n)&&(n1==n)))
    {
        i=i+1;
        x[i]=0;
        n0=n0+1;
        stackPermutation(x,i,n0,n1,n);
        n0=n0-1; 
    }
    if((n0==n)&&(n1<n))
    {
        i=i+1;
        x[i]=1;
        n1=n1+1;
        stackPermutation(x,i,n0,n1,n);
        n1=n1-1;
    }
    if((n0==n1)&&(n1==n))
    {
        
       for(int j=0;j<(2*n);j++)
        {
            printf("%d",x[j]);
           /*if(x[j]==0)
           push(front);
           if(x[j]==1)
           pop();*/
        }
        printf("\n");
    }
    
}

int main()
{
    front=NULL;
    rear=NULL;
    int n,f;
    printf("Enter the number of digits\n");
    scanf("%d",&n);
    printf("Enter the number's digit one by one\n");
    for(int i=1;i<=n;i++)
    {
    enQueue();
    }
    print(front);
    int x[2*n];
    x[0]=0;
    stackPermutation(x,0,1,0,n);
    
    return 0;
}











